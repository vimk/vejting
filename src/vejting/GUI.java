/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package vejting;

import com.mysql.jdbc.MysqlDataTruncation;
import java.awt.Color;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

/**
 *
 * @author Morten, Kim & Jonas
 */
public class GUI extends javax.swing.JFrame {
    
    private Statement stmt;
    private Truck truck;
    private Truck[] trucklist;
    private TruckDriver driver;
    private TruckDriver[] driverlist;
    private Customer customer;
    private Customer[] customerlist;
    private Goods goods;
    private Goods[] goodslist;
    private Route route;
    private Route[] routelist;
    private int count;
    private Color redcolor;
    private Color greencolor;
    private Order order;
    private Order[] orderlist;
    private double gprice;
    private Customer ordercustomer;
    private Truck ordertruck;
    private TruckDriver ordertruckdriver;
    private Goods ordergoods;
    private Route orderroute;
    private boolean routeApproved;
    private boolean dateApproved;
    private DateFormat dateFormat;
    private Date date;

    /**
     * Creates new form GUI
     */
    public GUI() {
        dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        date = new Date();
        routeApproved = false;
        dateApproved = false;
        gprice = 0;
        redcolor = new Color(255, 51, 51);
        greencolor = new Color(51, 153, 0);
        
        initComponents();
        jPanel1.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jLogForbind = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLogIP = new javax.swing.JTextField();
        jLogPort = new javax.swing.JTextField();
        jLogDB = new javax.swing.JTextField();
        jLogBruger = new javax.swing.JTextField();
        jLogError = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLogPW = new javax.swing.JPasswordField();
        jPanel1 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jOrderPickCity = new javax.swing.JTextField();
        jOrderPickZip = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jOrderPickAddress = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jOrderPickName = new javax.swing.JTextField();
        jOrderClearPickup = new javax.swing.JButton();
        jOrderComboCustomer = new javax.swing.JComboBox();
        jLabel14 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jOrderDeliveryCity = new javax.swing.JTextField();
        jOrderDeliveryZip = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        jOrderDeliveryAddress = new javax.swing.JTextField();
        jLabel26 = new javax.swing.JLabel();
        jOrderDeliveryName = new javax.swing.JTextField();
        jOrderClearDelivery = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jOrderKM = new javax.swing.JLabel();
        jOrderFrom = new javax.swing.JLabel();
        jOrderTo = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        jLabel18 = new javax.swing.JLabel();
        jOrderComboVehicle = new javax.swing.JComboBox();
        jOrderComboDriver = new javax.swing.JComboBox();
        jLabel17 = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jOrderComments = new javax.swing.JTextArea();
        jPanel10 = new javax.swing.JPanel();
        jLabel23 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jOrderPrice = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jOrderDanger = new javax.swing.JCheckBox();
        jOrderPalle = new javax.swing.JRadioButton();
        jOrderStyk = new javax.swing.JRadioButton();
        jOrderSpecial = new javax.swing.JRadioButton();
        jOrderComboGoodstype = new javax.swing.JComboBox();
        jOrderWeight = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jOrderRadioPickup = new javax.swing.JRadioButton();
        jOrderRadioDelivery = new javax.swing.JRadioButton();
        jOrderCreateOrder = new javax.swing.JButton();
        jOrderErrorDelivery = new javax.swing.JLabel();
        jOrderDate = new javax.swing.JTextField();
        jOrderErrorOrder = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Database log ind", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11))); // NOI18N

        jLogForbind.setText("Forbind");
        jLogForbind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jLogForbindActionPerformed(evt);
            }
        });

        jLabel1.setText("IP:");

        jLabel2.setText("Port:");

        jLabel3.setText("Databasenavn:");

        jLabel4.setText("Brugernavn:");

        jLabel5.setText("Password:");

        jLogIP.setText("localhost");

        jLogPort.setText("3306");

        jLogDB.setText("vejtransport");

        jLogBruger.setText("root");

        jLogError.setFont(new java.awt.Font("Tahoma", 2, 12)); // NOI18N
        jLogError.setForeground(new java.awt.Color(255, 51, 51));

        jLogPW.setText("root");
        jLogPW.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jLogPWActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator1)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel12Layout.createSequentialGroup()
                        .addComponent(jLogForbind)
                        .addGap(18, 18, 18)
                        .addComponent(jLogError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(8, 8, 8))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel12Layout.createSequentialGroup()
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(30, 30, 30)
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLogPort)
                            .addComponent(jLogDB, javax.swing.GroupLayout.DEFAULT_SIZE, 460, Short.MAX_VALUE)
                            .addComponent(jLogBruger)
                            .addComponent(jLogPW)
                            .addComponent(jLogIP))))
                .addGap(18, 18, 18))
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLogIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLogPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLogDB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLogBruger, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5)
                    .addComponent(jLogPW, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 4, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLogForbind)
                    .addComponent(jLogError, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(234, 234, 234)
                .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(275, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Log ind", jPanel2);

        jPanel7.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Afhentningsadresse", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N
        jPanel4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jPanel4MouseEntered(evt);
            }
        });

        jLabel6.setText("Navn:");

        jLabel8.setText("Postnummer:");

        jLabel7.setText("Adresse:");

        jLabel9.setText("By:");

        jOrderPickName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jOrderPickNameActionPerformed(evt);
            }
        });

        jOrderClearPickup.setText("Ryd");
        jOrderClearPickup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jOrderClearPickupActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jOrderPickName)
                            .addComponent(jOrderPickAddress)
                            .addComponent(jOrderPickZip)
                            .addComponent(jOrderPickCity, javax.swing.GroupLayout.DEFAULT_SIZE, 183, Short.MAX_VALUE)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jOrderClearPickup)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jOrderPickName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jOrderPickAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jOrderPickZip, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jOrderPickCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jOrderClearPickup)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jOrderComboCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jOrderComboCustomerActionPerformed(evt);
            }
        });

        jLabel14.setText("Kunde:");

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Leveringsadresse", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N
        jPanel5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jPanel5MouseEntered(evt);
            }
        });

        jLabel19.setText("Navn:");

        jLabel20.setText("Postnummer:");

        jLabel25.setText("Adresse:");

        jLabel26.setText("By:");

        jOrderDeliveryName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jOrderDeliveryNameActionPerformed(evt);
            }
        });

        jOrderClearDelivery.setText("Ryd");
        jOrderClearDelivery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jOrderClearDeliveryActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel20, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel26, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel25, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jOrderDeliveryName, javax.swing.GroupLayout.DEFAULT_SIZE, 183, Short.MAX_VALUE)
                            .addComponent(jOrderDeliveryAddress)
                            .addComponent(jOrderDeliveryZip)
                            .addComponent(jOrderDeliveryCity)))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jOrderClearDelivery)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(jOrderDeliveryName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel25)
                    .addComponent(jOrderDeliveryAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jOrderDeliveryZip, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel20))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jOrderDeliveryCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel26))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jOrderClearDelivery)
                .addContainerGap())
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Nuværende rute", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        jLabel11.setText("Til:");

        jLabel10.setText("Fra:");

        jLabel12.setText("Km:");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jOrderKM, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jOrderTo, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jOrderFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel10)
                    .addComponent(jOrderFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel11)
                    .addComponent(jOrderTo, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(jOrderKM, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jLabel21.setText("Leveringsdato:");

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Transport", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        jLabel18.setText("Chauffør:");

        jOrderComboVehicle.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Udfyld produkt" }));
        jOrderComboVehicle.setEnabled(false);

        jOrderComboDriver.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Udfyld produkt" }));
        jOrderComboDriver.setEnabled(false);
        jOrderComboDriver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jOrderComboDriverActionPerformed(evt);
            }
        });

        jLabel17.setText("Køretøj:");

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel18))
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jOrderComboDriver, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jOrderComboVehicle, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(jOrderComboVehicle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(jOrderComboDriver, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(32, Short.MAX_VALUE))
        );

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Bemærkninger (Indtast mængde og antal)", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        jOrderComments.setColumns(20);
        jOrderComments.setRows(5);
        jScrollPane1.setViewportView(jOrderComments);

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 145, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Produkt", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N
        jPanel10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jPanel10MouseEntered(evt);
            }
        });

        jLabel23.setText("Maksimal vægt:");

        jLabel15.setText("Pris:");

        jOrderPrice.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

        jLabel13.setText("Fragt type:");

        jOrderDanger.setText("Farligt gods");
        jOrderDanger.setEnabled(false);
        jOrderDanger.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jOrderDangerActionPerformed(evt);
            }
        });

        buttonGroup2.add(jOrderPalle);
        jOrderPalle.setText("Palle");
        jOrderPalle.setEnabled(false);
        jOrderPalle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jOrderPalleActionPerformed(evt);
            }
        });

        buttonGroup2.add(jOrderStyk);
        jOrderStyk.setText("Stykgods");
        jOrderStyk.setEnabled(false);
        jOrderStyk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jOrderStykActionPerformed(evt);
            }
        });

        buttonGroup2.add(jOrderSpecial);
        jOrderSpecial.setText("Special");
        jOrderSpecial.setEnabled(false);
        jOrderSpecial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jOrderSpecialActionPerformed(evt);
            }
        });

        jOrderComboGoodstype.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Udfyld leveringsinformation" }));
        jOrderComboGoodstype.setEnabled(false);
        jOrderComboGoodstype.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jOrderComboGoodstypeActionPerformed(evt);
            }
        });

        jOrderWeight.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jOrderComboGoodstype, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(jOrderPalle)
                        .addGap(30, 30, 30)
                        .addComponent(jOrderStyk)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jOrderSpecial))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jOrderPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jOrderDanger, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel23, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
                        .addComponent(jOrderWeight, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jOrderPalle)
                    .addComponent(jOrderStyk)
                    .addComponent(jOrderSpecial))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 4, Short.MAX_VALUE)
                .addComponent(jOrderComboGoodstype, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel23)
                    .addComponent(jOrderWeight, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jOrderDanger)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel15))
                    .addComponent(jOrderPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jLabel22.setText("åååå-mm-dd");

        buttonGroup1.add(jOrderRadioPickup);
        jOrderRadioPickup.setText("Brug som afhentning");
        jOrderRadioPickup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jOrderRadioPickupActionPerformed(evt);
            }
        });

        buttonGroup1.add(jOrderRadioDelivery);
        jOrderRadioDelivery.setText("Brug som levering");
        jOrderRadioDelivery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jOrderRadioDeliveryActionPerformed(evt);
            }
        });

        jOrderCreateOrder.setText("Opret ordre");
        jOrderCreateOrder.setEnabled(false);
        jOrderCreateOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jOrderCreateOrderActionPerformed(evt);
            }
        });

        jOrderErrorDelivery.setFont(new java.awt.Font("Tahoma", 3, 11)); // NOI18N
        jOrderErrorDelivery.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jOrderErrorDelivery.setText("Gå til 'Produkt' når ovenstående indtastning er færdig");
        jOrderErrorDelivery.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jOrderErrorDeliveryMouseEntered(evt);
            }
        });

        jOrderDate.setText(dateFormat.format(date));

        jOrderErrorOrder.setFont(new java.awt.Font("Tahoma", 3, 11)); // NOI18N
        jOrderErrorOrder.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jOrderErrorOrder, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addComponent(jOrderRadioPickup)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jOrderRadioDelivery))
                            .addComponent(jOrderComboCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel14))
                        .addGap(56, 56, 56)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel21)
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addComponent(jOrderDate, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel22)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jOrderErrorDelivery, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jOrderCreateOrder)
                .addGap(246, 246, 246))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(jLabel21))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jOrderComboCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel22)
                    .addComponent(jOrderDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jOrderRadioPickup)
                    .addComponent(jOrderRadioDelivery))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jOrderErrorDelivery, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)))
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jOrderErrorOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jOrderCreateOrder)
                .addContainerGap())
        );

        jPanel7Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jPanel6, jPanel8});

        jPanel7Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jPanel10, jPanel9});

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 15, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jTabbedPane1))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jTabbedPane1))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void login() {
        String db = "";
        String error = "";
        try {
            Class.forName("com.mysql.jdbc.Driver");
            Connection conn;
            
            db = jLogDB.getText();
            String url = "jdbc:mysql://" + jLogIP.getText() + ":" + jLogPort.getText() + "/" + db;
            String user = jLogBruger.getText();
            String pw = jLogPW.getText();
            
            if (!db.contains(" ")) {
                
                conn = DriverManager.getConnection(url, user, pw);
                stmt = conn.createStatement();
                
                jTabbedPane1.setVisible(false);
                jPanel1.setVisible(true);
                assignArraySize();
                
            } else {
                error = "Databasenavnet må ikke indeholde mellemrum.";
            }
            
        } catch (ClassNotFoundException ex) {
           
        } catch (SQLException ex) {
            if (ex.getErrorCode() == 0) {
                error = " Server ikke startet";
            } else if (ex.getErrorCode() == 1049) {
                error = "\"" + db + "\"" + " findes ikke";
            } else if (ex.getErrorCode() == 1045) {
                error = "Brugernavn og kode stemmer ikke";
            }
        }
        jLogError.setText("Forbindelse mislykket: " + error);
        
    }
    
    private void assignArraySize() {
        
        String sql = "SELECT count(*) as amount from truckdriver";
        try {
            count = 0;
            ResultSet rs = stmt.executeQuery(sql);
            if (rs.next()) {
                count = rs.getInt("amount");
            }
            driverlist = new TruckDriver[count];
        } catch (SQLException ex) {
            
        }
        
        sql = "SELECT count(*) as amount from customer";
        try {
            count = 0;
            ResultSet rs = stmt.executeQuery(sql);
            if (rs.next()) {
                count = rs.getInt("amount");
            }
            customerlist = new Customer[count];
        } catch (SQLException ex) {
           
        }
        
        sql = "SELECT count(*) as amount from goods";
        try {
            count = 0;
            ResultSet rs = stmt.executeQuery(sql);
            if (rs.next()) {
                count = rs.getInt("amount");
            }
            goodslist = new Goods[count];
        } catch (SQLException ex) {
            
        }
        
        sql = "SELECT count(*) as amount from truck";
        try {
            count = 0;
            ResultSet rs = stmt.executeQuery(sql);
            if (rs.next()) {
                count = rs.getInt("amount");
            }
            trucklist = new Truck[count];
        } catch (SQLException ex) {
            
        }
        
        sql = "SELECT count(*) as amount from route";
        try {
            count = 0;
            ResultSet rs = stmt.executeQuery(sql);
            if (rs.next()) {
                count = rs.getInt("amount");
            }
            routelist = new Route[count];
        } catch (SQLException ex) {
            
        }
        createArrays();
    }
    
    private void jLogForbindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jLogForbindActionPerformed
        login();
    }//GEN-LAST:event_jLogForbindActionPerformed
    
    public void createArrays() {
        
        String sql = "SELECT * from truckdriver";
        try {
            count = 0;
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                driverlist[count] = new TruckDriver(rs.getInt("id"),
                        rs.getString("named"), rs.getString("certificates"));
                count++;
            }
        } catch (SQLException ex) {
           
        }
        
        sql = "SELECT customer.id, customer.named, customer.address, city.zip, city.named AS city FROM customer LEFT OUTER JOIN city ON customer.fk_city = city.id";
        try {
            count = 0;
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                customerlist[count] = new Customer(rs.getInt("id"), rs.getString("named"), rs.getString("address"), rs.getInt("zip"), rs.getString("city"));
                count++;
            }
        } catch (SQLException ex) {
            
        }
        
        sql = "SELECT * from goods";
        try {
            count = 0;
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                goodslist[count] = new Goods(rs.getInt("id"), rs.getString("typegoods"), rs.getInt("fromamount"), rs.getInt("toamount"), rs.getInt("priceprkm"), rs.getInt("maxtotalkg"));
                count++;
            }
        } catch (SQLException ex) {
            
        }
        
        sql = "SELECT route.id,fromcity.named AS fromcity,tocity.named AS tocity,distance FROM route LEFT OUTER JOIN city AS fromcity ON fromcity = fromcity.id LEFT OUTER JOIN city AS tocity ON tocity = tocity.id";
        try {
            count = 0;
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                routelist[count] = new Route(rs.getInt("id"), rs.getString("fromcity"), rs.getString("tocity"), rs.getInt("distance"));
                count++;
            }
        } catch (SQLException ex) {
           
        }
        
        sql = "SELECT * from truck";
        try {
            count = 0;
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                trucklist[count] = new Truck(rs.getInt("id"), rs.getString("named"), rs.getString("licenseplate"), rs.getInt("maxPallet"), rs.getInt("maxm3"), rs.getInt("maxkg"));
                count++;
            }
        } catch (SQLException ex) {
            
        }
        createOrder();
        updateCustomer();
    }
    
    public void createOrder() {
        String sql = "SELECT count(*) as amount from ordre";
        try {
            count = 0;
            ResultSet rs = stmt.executeQuery(sql);
            if (rs.next()) {
                count = rs.getInt("amount");
            }
            orderlist = new Order[count];
        } catch (SQLException ex) {
            
        }
        
        sql = "SELECT * from ordre";
        try {
            count = 0;
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                for (int i = 0; i < customerlist.length; i++) {
                    if (rs.getInt("fk_customer") == customerlist[i].getId()) {
                        ordercustomer = customerlist[i];
                        i = customerlist.length;
                    }
                }
                for (int i = 0; i < routelist.length; i++) {
                    if (rs.getInt("fk_route") == routelist[i].getId()) {
                        orderroute = routelist[i];
                        i = routelist.length;
                    }
                }
                for (int i = 0; i < trucklist.length; i++) {
                    if (rs.getInt("fk_truck") == trucklist[i].getId()) {
                        ordertruck = trucklist[i];
                        i = trucklist.length;
                    }
                }
                for (int i = 0; i < driverlist.length; i++) {
                    if (rs.getInt("fk_truckdriver") == driverlist[i].getId()) {
                        ordertruckdriver = driverlist[i];
                        i = driverlist.length;
                    }
                }
                for (int i = 0; i < goodslist.length; i++) {
                    if (rs.getInt("fk_goods") == goodslist[i].getId()) {
                        ordergoods = goodslist[i];
                        i = goodslist.length;
                    }
                }
                orderlist[count] = new Order(rs.getString("deliverydate"),
                        rs.getBoolean("isdangerous"), rs.getDouble("price"),
                        rs.getString("note"), ordercustomer, orderroute,
                        ordertruck, ordertruckdriver, ordergoods,
                        rs.getString("pickUpName"), rs.getString("pickUpAddress"),
                        rs.getInt("pickupzip"), rs.getString("deliveryName"),
                        rs.getString("deliveryAddress"), rs.getInt("deliveryzip"));
                count++;
            }
        } catch (SQLException ex) {
           
        }
    }
    
    public void updateCustomer() {
        try {
            for (int i = 0; i < customerlist.length; i++) {
                jOrderComboCustomer.addItem(customerlist[i]);
            }
        } catch (NullPointerException ex) {
            
        }
    }
    
    private void clearPickup() {
        jOrderPickName.setText("");
        jOrderPickAddress.setText("");
        jOrderPickZip.setText("");
        jOrderPickCity.setText("");
    }
    
    private void clearDelivery() {
        jOrderDeliveryName.setText("");
        jOrderDeliveryAddress.setText("");
        jOrderDeliveryZip.setText("");
        jOrderDeliveryCity.setText("");
    }
    
    public void calcPrice() {
        if (jOrderComboGoodstype.getItemCount() != 0 && !jOrderCreateOrder.isEnabled()) {
            jOrderCreateOrder.setEnabled(true);
        }
        jOrderErrorOrder.setText("");
        jOrderComboDriver.setBackground(null);
        jOrderComboVehicle.setBackground(null);
        if ((jOrderComboGoodstype.getSelectedIndex() > -1)) {
            Goods tempgoods = (Goods) jOrderComboGoodstype.getSelectedItem();
            gprice = (int) tempgoods.getPricePrKm() * route.getDistance();
            if (jOrderDanger.isSelected()) {
                gprice = gprice * 1.1;
            }
            jOrderPrice.setText(Math.round(gprice) + " kr.");
        }
        if (!"".equals(jOrderPrice.getText())) {
            addTrucksToCombo();
            addTruckDriversToCombo();
        }
    }
    
    public void checkValidRoute() {
        if ("".equals(jOrderPickName.getText()) || "".equals(jOrderPickAddress.getText()) || "".equals(jOrderPickZip.getText()) || "".equals(jOrderPickCity.getText()) || "".equals(jOrderDeliveryName.getText()) || "".equals(jOrderDeliveryAddress.getText()) || "".equals(jOrderDeliveryZip.getText()) || "".equals(jOrderDeliveryCity.getText()) || "".equals(jOrderDate.getText())) {
            routeApproved = false;
            jOrderErrorDelivery.setForeground(null);
            jOrderErrorDelivery.setText("Udfyld venligst alle felter. Gå til 'Produkt' når indtastningen er færdig.");
        } else if ((!jOrderPickCity.getText().equalsIgnoreCase(jOrderDeliveryCity.getText()))) {
            for (int i = 0; i < routelist.length; i++) {
                if (routelist[i].getFromCity().equalsIgnoreCase(jOrderPickCity.getText())
                        && routelist[i].getToCity().equalsIgnoreCase(jOrderDeliveryCity.getText())) {
                    route = routelist[i];
                    routeApproved = true;
                    i = routelist.length;
                    createRoute();
                } else if (routelist[i].getFromCity().equalsIgnoreCase(jOrderDeliveryCity.getText())
                        && routelist[i].getToCity().equalsIgnoreCase(jOrderPickCity.getText())) {
                    route = routelist[i];
                    route.setFromCity(jOrderPickCity.getText());
                    route.setToCity(jOrderDeliveryCity.getText());
                    routeApproved = true;
                    i = routelist.length;
                    createRoute();
                }
            }
            if (!routeApproved) {
                jOrderErrorDelivery.setForeground(redcolor);
                jOrderErrorDelivery.setText("Ugyldig kombination af byer. Tjek, at byerne udgør en gyldig rute!");
            }
        } else {
            routeApproved = false;
            jOrderErrorDelivery.setForeground(redcolor);
            jOrderErrorDelivery.setText("Leverings- og afhentningsby må ikke være de samme.");
        }
    }
    
    public void addTrucksToCombo() {
        jOrderComboVehicle.setEnabled(true);
        jOrderComboVehicle.removeAllItems();
        
        Goods tempgoods = (Goods) jOrderComboGoodstype.getSelectedItem();
        for (int i = 0; i < trucklist.length; i++) {
            if (jOrderPalle.isSelected()) {
                if ((tempgoods.getMaxWeight() <= trucklist[i].getMaxKg())
                        && (tempgoods.getToAmount() <= trucklist[i].getMaxPallet())) {
                    jOrderComboVehicle.addItem(trucklist[i]);
                }
            }
            if (jOrderStyk.isSelected()) {
                if ((tempgoods.getMaxWeight() <= trucklist[i].getMaxKg())
                        && (tempgoods.getToAmount() <= trucklist[i].getMaxM3())) {
                    jOrderComboVehicle.addItem(trucklist[i]);
                }
            }
            if (jOrderSpecial.isSelected()) {
                if ((tempgoods.getMaxWeight() <= trucklist[i].getMaxKg())
                        && (tempgoods.getToAmount() <= trucklist[i].getMaxM3())
                        && (trucklist[i].getName().contains("kran"))) {
                    jOrderComboVehicle.addItem(trucklist[i]);
                }
            }
        }
        removeDuplicateTruck();
    }
    
    public void removeDuplicateTruck() {
        if (jOrderComboVehicle.getItemCount() != 0) {
            Truck temptruck;
            for (int t = 0; t < jOrderComboVehicle.getItemCount(); t++) {
                temptruck = (Truck) jOrderComboVehicle.getItemAt(t);
                for (int i = 0; i < orderlist.length; i++) {
                    if (orderlist[i].getDeliverydate().equals(jOrderDate.getText())
                            && orderlist[i].getTruck().getId() == temptruck.getId()) {
                        jOrderComboVehicle.removeItem(temptruck);
                        t = t - 1;
                    }
                }
            }
        }
    }
    
    public void addTruckDriversToCombo() {
        jOrderComboDriver.removeAllItems();
        jOrderComboDriver.setEnabled(true);
        try {
            for (int i = 0; i < driverlist.length; i++) {
                if (jOrderSpecial.isSelected()) {
                    if (jOrderDanger.isSelected()) {
                        if (driverlist[i].getCertificate().contains("ADR")
                                && driverlist[i].getCertificate().contains("Kran")) {
                            jOrderComboDriver.addItem(driverlist[i]);
                        }
                    } else {
                        if (driverlist[i].getCertificate().contains("Kran")) {
                            jOrderComboDriver.addItem(driverlist[i]);
                        }
                    }
                } else {
                    if (jOrderDanger.isSelected()) {
                        if (driverlist[i].getCertificate().contains("ADR")) {
                            jOrderComboDriver.addItem(driverlist[i]);
                        }
                    } else {
                        jOrderComboDriver.addItem(driverlist[i]);
                    }
                }
            }
            removeDuplicateTruckDrivers();
        } catch (NullPointerException ex) {
           
        }
    }
    
    public void removeDuplicateTruckDrivers() {
        if (jOrderComboDriver.getItemCount() != 0) {
            TruckDriver temptruckdriver;
            for (int t = 0; t < jOrderComboDriver.getItemCount(); t++) {
                temptruckdriver = (TruckDriver) jOrderComboDriver.getItemAt(t);
                for (int i = 0; i < orderlist.length; i++) {
                    if (orderlist[i].getDeliverydate().equals(jOrderDate.getText())
                            && orderlist[i].getTruckdriver().getId() == temptruckdriver.getId()) {
                        jOrderComboDriver.removeItem(temptruckdriver);
                        t = t - 1;
                    }
                }
            }
        }
    }
    
    private void createRoute() {
        String tempdate = jOrderDate.getText();
        if ((tempdate.length() == 10) && (tempdate.substring(4, 5).equals("-"))
                && (tempdate.substring(7, 8).equals("-"))) {
            try {
                SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");
                df.parse(jOrderDate.getText());
                if (!jOrderComboGoodstype.isEnabled()) {
                    jOrderComboGoodstype.removeAllItems();
                }
                dateApproved = true;
                try {
                    if (routeApproved && dateApproved) {
                        jOrderErrorDelivery.setText("");
                        jOrderFrom.setText(route.getFromCity());
                        jOrderTo.setText(route.getToCity());
                        jOrderKM.setText(route.getDistance() + "");
                        jOrderErrorDelivery.setForeground(greencolor);
                        jOrderErrorDelivery.setText(route + " tilføjet til rute.");
                        jOrderPalle.setEnabled(true);
                        jOrderSpecial.setEnabled(true);
                        jOrderStyk.setEnabled(true);
                        jOrderComboGoodstype.setEnabled(true);
                        jOrderWeight.setEnabled(true);
                        jOrderDanger.setEnabled(true);
                    }
                } catch (NullPointerException ex) {
                    jOrderErrorDelivery.setText("Rute ikke oprettet");
                }
            } catch (ParseException ex) {
                dateApproved = false;
                jOrderErrorDelivery.setForeground(redcolor);
                jOrderErrorDelivery.setText("Ugyldigt dato format. Eksempel: 2000-01-14");
            }
        } else {
            dateApproved = false;
            jOrderErrorDelivery.setForeground(redcolor);
            jOrderErrorDelivery.setText("Ugyldigt dato format. Eksempel: 2000-01-14");
        }
    }
    
    public void saveOrderToDB() {
        String dbError = "";
        String sql = "insert into ordre (deliverydate,maxgoodsamount,isdangerous,"
                + "price,note,fk_customer,fk_route,fk_truck,fk_truckdriver,fk_goods, "
                + "pickupname, pickupaddress, pickupzip, deliveryname, deliveryaddress, deliveryzip)"
                + "values('" + order.getDeliverydate() + "'," + order.getGoods().getToAmount()
                + "," + order.isDangerGoods() + "," + order.getPrice()
                + ",'" + order.getComment() + "'," + order.getCustomer().getId()
                + "," + order.getRoute().getId() + "," + order.getTruck().getId()
                + "," + order.getTruckdriver().getId() + "," + order.getGoods().getId()
                + ",'" + order.getPickUpName() + "','" + order.getPickUpAddress()
                + "'," + order.getPickUpZip() + ",'" + order.getDeliveryName()
                + "','" + order.getDeliveryAddress() + "'," + order.getDeliveryZip() + ")";
        try {
            stmt.executeUpdate(sql);
            jOrderErrorOrder.setForeground(greencolor);
            dbError = order.getTruckdriver().getName() + ": " + order.getTruck()
                    + " rute: " + order.getRoute() + " oprettet d. " + order.getDeliverydate();
            jOrderComments.setText("");
            clearGoodsTruckandDriver();
            createOrder();
        } catch (MysqlDataTruncation ex) {
            jOrderDate.setBackground(redcolor);
            jOrderErrorOrder.setForeground(redcolor);
            dbError = "Du har indtastet ugyldigt dato. Venligst ændre datoen, og prøv igen.";
        } catch (SQLException ex) {
            jOrderErrorOrder.setForeground(redcolor);
            dbError = "Der er sket en uventet fejl. Venligst vælg gods, chauffør og lastbil igen.";
            clearGoodsTruckandDriver();
        }
        jOrderErrorOrder.setText(dbError);
    }
    
    public void clearGoodsTruckandDriver() {
        buttonGroup2.clearSelection();
        jOrderComboGoodstype.removeAllItems();
        jOrderComboDriver.removeAllItems();
        jOrderComboVehicle.removeAllItems();
    }
    
    private void jOrderErrorDeliveryMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jOrderErrorDeliveryMouseEntered
        jOrderDate.setBackground(null);
        jOrderErrorOrder.setForeground(null);
        jOrderErrorOrder.setText("");
        checkValidRoute();
    }//GEN-LAST:event_jOrderErrorDeliveryMouseEntered
    
    private void jOrderCreateOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jOrderCreateOrderActionPerformed
        String dbError = "";
        try {
            Goods tempgoods = (Goods) jOrderComboGoodstype.getSelectedItem();
            Customer tempcustomer = (Customer) jOrderComboCustomer.getSelectedItem();
            Route temproute = route;
            Truck temptruck = (Truck) jOrderComboVehicle.getSelectedItem();
            TruckDriver temptruckdriver = (TruckDriver) jOrderComboDriver.getSelectedItem();
            
            boolean dangerGoods = (jOrderDanger.isSelected()) ? true : false;
            order = new Order(jOrderDate.getText(), dangerGoods, gprice,
                    jOrderComments.getText(), tempcustomer, temproute, temptruck,
                    temptruckdriver, tempgoods, jOrderPickName.getText(),
                    jOrderPickAddress.getText(), Integer.parseInt(jOrderPickZip.getText()),
                    jOrderDeliveryName.getText(), jOrderDeliveryAddress.getText(),
                    Integer.parseInt(jOrderDeliveryZip.getText()));
            saveOrderToDB();
        } catch (NullPointerException ex) {
            if (jOrderComboVehicle.getSelectedIndex() == -1) {
                jOrderComboVehicle.setBackground(redcolor);
                dbError = "Du har glemt at vælge lastbil/chauffør. Vælg gods på ny og prøv igen.";
            }
            if (jOrderComboDriver.getSelectedIndex() == -1) {
                jOrderComboDriver.setBackground(redcolor);
                dbError = "Du har glemt at vælge lastbil/chauffør. Vælg gods på ny og prøv igen.";
            }
            buttonGroup2.clearSelection();
            jOrderComboGoodstype.removeAllItems();
            jOrderErrorOrder.setForeground(redcolor);
            jOrderErrorOrder.setText(dbError);
        }
    }//GEN-LAST:event_jOrderCreateOrderActionPerformed
    
    private void jOrderRadioDeliveryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jOrderRadioDeliveryActionPerformed
        Customer cust = (Customer) jOrderComboCustomer.getSelectedItem();
        jOrderDeliveryName.setText(cust.getName());
        jOrderDeliveryAddress.setText(cust.getAddress());
        jOrderDeliveryZip.setText("" + cust.getZip());
        jOrderDeliveryCity.setText(cust.getCity());
    }//GEN-LAST:event_jOrderRadioDeliveryActionPerformed
    
    private void jOrderRadioPickupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jOrderRadioPickupActionPerformed
        Customer cust = (Customer) jOrderComboCustomer.getSelectedItem();
        jOrderPickName.setText(cust.getName());
        jOrderPickAddress.setText(cust.getAddress());
        jOrderPickZip.setText("" + cust.getZip());
        jOrderPickCity.setText(cust.getCity());
    }//GEN-LAST:event_jOrderRadioPickupActionPerformed
    
    private void jPanel10MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel10MouseEntered
    }//GEN-LAST:event_jPanel10MouseEntered
    
    private void jOrderComboGoodstypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jOrderComboGoodstypeActionPerformed
        if (jOrderComboGoodstype.getSelectedIndex() > -1) {
            calcPrice();
            Goods tempgoods = (Goods) jOrderComboGoodstype.getSelectedItem();
            jOrderWeight.setText(tempgoods.getMaxWeight() + " kg");
        }
    }//GEN-LAST:event_jOrderComboGoodstypeActionPerformed
    
    private void jOrderSpecialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jOrderSpecialActionPerformed
        jOrderComboGoodstype.removeAllItems();
        try {
            for (int i = 0; i < goodslist.length; i++) {
                if ("Specialfragt".equals(goodslist[i].getGoodsType())) {
                    jOrderComboGoodstype.addItem(goodslist[i]);
                }
            }
            calcPrice();
        } catch (NullPointerException ex) {
            
        }
    }//GEN-LAST:event_jOrderSpecialActionPerformed
    
    private void jOrderStykActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jOrderStykActionPerformed
        jOrderComboGoodstype.removeAllItems();
        try {
            for (int i = 0; i < goodslist.length; i++) {
                if ("Stykgods".equals(goodslist[i].getGoodsType())) {
                    jOrderComboGoodstype.addItem(goodslist[i]);
                }
            }
            calcPrice();
        } catch (NullPointerException ex) {
            
        }
    }//GEN-LAST:event_jOrderStykActionPerformed
    
    private void jOrderPalleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jOrderPalleActionPerformed
        jOrderComboGoodstype.removeAllItems();
        try {
            for (int i = 0; i < goodslist.length; i++) {
                if ("Pallefragt".equals(goodslist[i].getGoodsType())) {
                    jOrderComboGoodstype.addItem(goodslist[i]);
                }
            }
            calcPrice();
        } catch (NullPointerException ex) {
          
        }
    }//GEN-LAST:event_jOrderPalleActionPerformed
    
    private void jOrderDangerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jOrderDangerActionPerformed
        calcPrice();
    }//GEN-LAST:event_jOrderDangerActionPerformed
    
    private void jOrderComboDriverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jOrderComboDriverActionPerformed
    }//GEN-LAST:event_jOrderComboDriverActionPerformed
    
    private void jPanel5MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel5MouseEntered
    }//GEN-LAST:event_jPanel5MouseEntered
    
    private void jOrderClearDeliveryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jOrderClearDeliveryActionPerformed
        clearDelivery();
    }//GEN-LAST:event_jOrderClearDeliveryActionPerformed
    
    private void jOrderDeliveryNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jOrderDeliveryNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jOrderDeliveryNameActionPerformed
    
    private void jOrderComboCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jOrderComboCustomerActionPerformed
        buttonGroup1.clearSelection();
        clearDelivery();
        clearPickup();
    }//GEN-LAST:event_jOrderComboCustomerActionPerformed
    
    private void jPanel4MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel4MouseEntered
    }//GEN-LAST:event_jPanel4MouseEntered
    
    private void jOrderClearPickupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jOrderClearPickupActionPerformed
        clearPickup();
    }//GEN-LAST:event_jOrderClearPickupActionPerformed
    
    private void jOrderPickNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jOrderPickNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jOrderPickNameActionPerformed
    
    private void jLogPWActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jLogPWActionPerformed
        login();
    }//GEN-LAST:event_jLogPWActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                    
                    
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField jLogBruger;
    private javax.swing.JTextField jLogDB;
    private javax.swing.JLabel jLogError;
    private javax.swing.JButton jLogForbind;
    private javax.swing.JTextField jLogIP;
    private javax.swing.JPasswordField jLogPW;
    private javax.swing.JTextField jLogPort;
    private javax.swing.JButton jOrderClearDelivery;
    private javax.swing.JButton jOrderClearPickup;
    private javax.swing.JComboBox jOrderComboCustomer;
    private javax.swing.JComboBox jOrderComboDriver;
    private javax.swing.JComboBox jOrderComboGoodstype;
    private javax.swing.JComboBox jOrderComboVehicle;
    private javax.swing.JTextArea jOrderComments;
    private javax.swing.JButton jOrderCreateOrder;
    private javax.swing.JCheckBox jOrderDanger;
    private javax.swing.JTextField jOrderDate;
    private javax.swing.JTextField jOrderDeliveryAddress;
    private javax.swing.JTextField jOrderDeliveryCity;
    private javax.swing.JTextField jOrderDeliveryName;
    private javax.swing.JTextField jOrderDeliveryZip;
    private javax.swing.JLabel jOrderErrorDelivery;
    private javax.swing.JLabel jOrderErrorOrder;
    private javax.swing.JLabel jOrderFrom;
    private javax.swing.JLabel jOrderKM;
    private javax.swing.JRadioButton jOrderPalle;
    private javax.swing.JTextField jOrderPickAddress;
    private javax.swing.JTextField jOrderPickCity;
    private javax.swing.JTextField jOrderPickName;
    private javax.swing.JTextField jOrderPickZip;
    private javax.swing.JLabel jOrderPrice;
    private javax.swing.JRadioButton jOrderRadioDelivery;
    private javax.swing.JRadioButton jOrderRadioPickup;
    private javax.swing.JRadioButton jOrderSpecial;
    private javax.swing.JRadioButton jOrderStyk;
    private javax.swing.JLabel jOrderTo;
    private javax.swing.JLabel jOrderWeight;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables
}
